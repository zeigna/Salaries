print('hello world')
T
t
a<- "hello"
b <- "world"
a + b
class(a)
class(12)
class(T)
class(32.22)
Class(T)
nvec <- c(1, 2, 3, 4, 5)
nvec
class(nvec)
cvec("U", "S", "A")
cvec <- ("U", "S", "A")
cvec <- c("U", "S", "A")
cvec
class(cvec)
class(cvec)
lvec <- c(T, F)
class(lvec)
lvec
temps <- c(72, 71, 68, 73, 55, 68, 76)
temps
names(temps) <- c("Mon", "Tues", "Wed", "Thur", "Fri", "Sat", "Sun")
temps
days <- c("Mon", "Tues", "Wed", "Thur", "Fri", "Sat", "Sun")
days
names(temps)<-days
temps
days <- c("Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado", "Domingo")
days
names(temps)<- days
temps
v1 <- c(1, 2, 3)
v2 <- c(5, 6, 7)
v1+v2
v1 - v2
v2 - v1
v1 * v2
v1/v2
v2/v1
sum(v1)
prod(v1 * v2)
5*12*21
v1 <- c(100, 200, 300)
v2 <- c('a', 'b', 'c')
v1[3]
v2[2]
v1
v2
v <- c(1, 2, 3, 4)
names(v) <- c('a', 'b', 'c', 'd')
v
v[2]
v['d']
v[c('c', 'a', 'b')]
v
v>2
my.filter <- v>2
my.fitler
my.filter
x[v>3]
v[v>3]
v[my.filter]
??vector
help('vector')
#R Basics Training Exercise
#What is two to the power of five
2^5
Create a vector called stock.prices
#Create a vector called stock.prices
stock.prices <- c(23, 27, 23, 21, 34)
stock.prices
days <- c('Mon', 'Tues', 'Wed', 'Thurs', 'Fri')
names(stock.prices) <- days
stock.prices
mean(stock.prices)
over.23 <- stock.prices[stock.prices > 23]
over.23
max(stock.prices)
max(days)
stock.prices > 23
over.23 <- stock.prices > 23
over.23
stock.prices[over.23]
stock.prices[stock.prices > 23]
max(stock.prices)
stock.prices[stock.prices == 34]
stock.prices[stock.prices = max(stock.prices)]
stock.prices[stock.prices == max(stock.prices)]
max.price <- max(stock.prices)
max.price
max.price <- stock.prices == max(stock.prices)
stock.prices[max.price]
nvec <- c(1: 25)
nvec
class(nvec)
svec(a:z)
svec <- c(a:z)
svec <- c('a', 'b', 'c', 'd')
scec
svec
class(svec)
grades <- (90, 80, 70, 60)
grades <- c(90, 80, 70, 60)
grades
class(grades)
names(grades) <- svec
names
grades
v1 <- (10, 20, 30, 40, 50)
v1 <- c(10, 20, 30, 40, 50)
v2 <- c(5, 20, 15, 20, 25)
v1
v2
v1 + v2
v1 - v2
v1 - 2
v1^2
v1 % v2
sum(v1)
mean(v2)
sum(v1,v2)
sum(v2)
v1
v1[3]
v1[c(2, 3)]
v1[c(2:5)]
grades
grades[c]
grades['c']
grades[70]
grades['a', 'c']
grades[c('a', 'c')]
passing.grades <- grades[c()]
passing.grades <- grades[c('a', 'b', 'c')]
passing.grades
v2
v2<100
v2*10 < 70
v2 == 20
v >v2
v1 > v2
library("tinyverse")
library(:tidyverse)
library ("tidyverse")
faithful
taxi <- c(0.94 1.59 6.36 1.35 6.65 2.68 0.83 2.31 4.91 0.5)
taxi <- 0.94 1.59 6.36 1.35 6.65 2.68 0.83 2.31 4.91 0.5
c <- 5
c
taxi <- c(0.94 1.59 6.36 1.35 6.65 2.68 0.83 2.31 4.91 0.5)
taxi
a <- 25 + 2
taxi <- c(0.94, 1.59, 6.36, 1.35, 6.65, 2.68, 0.83, 2.31, 4.91, 0.5)
taxi
mean(taxi)
test <- c(1, 2, 3, 4, 5)
mean(test)
var(test)
rm(list=ls())
taxi
taxi <- c(0.94, 1.59, 6.36, 1.35, 6.65, 2.68, 0.83, 2.31, 4.91, 0.5)
mean(taxi)
var(taxi)
swiaa
taxi
swiss
?swiss
mean(swiss$Agriculture)
var(swiss$Agriculture)
mean(swiss$Education)
var(swiss$Education)
faithful
?faithful
stripchart(faithful$eruptions, xlab = "Eruption time (mins)", main = "Old Faithful Eruption Lengths")
stripchart(faithful$eruptions, method = "stack", xlab = "Eruption time (mins)", main = "Old Faithful Eruption Lengths")
stripchart(faithful$eruptions, method = "jitter", xlab = "Eruption time (mins)", main = "Old Faithful Eruption Lengths")
stripchart(faithful$eruptions, method = "stack", xlab = "Eruption time (mins)", main = "Old Faithful Eruption Lengths")
stripchart(faithful$eruptions, method = "jitter", xlab = "Eruption time (mins)", main = "Old Faithful Eruption Lengths")
hist(faithful$waiting, main = "Old Faithful Time to Next Eruption", xlab = "waiting time (mins)")
hist(faithful$waiting, main = "Old Faithful Time to Next Eruption", xlab = "waiting time (mins)", breaks = 20)
hist(faithful$waiting, main = "Old Faithful Time to Next Eruption", xlab = "waiting time (mins)", breaks = 15)
hist(faithful$waiting, main = "Old Faithful Time to Next Eruption", xlab = "waiting time (mins)", breaks = 15, freq = FALSE)
cramp =
function(colours) {
n = length(colours)
plot.new()
plot.window(xlim = c(0,n),
ylim = c(0,1))
rect(1:n - 1, 0, 1:n, 1, col = colours, border = NA)
}
skewness(nhtemp)
install.packages("e1071")
library(e1071)
skewness(nhtemp)
pairs(faithful$eruptions, faithful$waiting)
# Get the input values.
input <- faithful[,c('duration','waiting')]
# Get the input values.
input <- faithful[,c("eruptions","waiting")]
input
faithful
# Get the input values.
input <- faithful[,c("eruptions","waiting")]
# Give the chart file a name.
png(file = "scatterplot.png")
# Plot the chart for cars with weight between 2.5 to 5 and mileage between 15 and 30.
plot(x = faithful$eruptions, y = faithful$waiting,
xlab = "Eruptions",
ylab = "Waiting",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Scatterplot of Duration x Waiting Time"
)
plot(x = faithful$eruptions, y = faithful$waiting,
xlab = "Eruptions",
ylab = "Waiting",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Scatterplot of Duration x Waiting Time"
)
# Save the file.
dev.off()
plot(x = faithful$eruptions, y = faithful$waiting, xlab = "Eruptions", ylab = "Waiting", main = "Scatterplot of Duration x Waiting Time")
?correl
?corr
?cor
cor(faithful$eruptions, faithful$waiting)
plot(x = faithful$eruptions, y = faithful$waiting, xlab = "Eruptions", ylab = "Waiting", main = "Scatterplot of Duration x Waiting Time", xlim = c(0, 3), ylim = c(0,3),)
plot(x = faithful$eruptions, y = faithful$waiting, xlab = "Eruptions", ylab = "Waiting", main = "Scatterplot of Duration x Waiting Time", xlim = c(0, 3))
faithful
# Get the input values.
input <- faithful[,c("eruptions","waiting")]
# Give the chart file a name.
png(file = "scatterplot.png")
# Plot the chart eruptions and waiting times
plot(x = faithful$eruptions, y = faithful$waiting, xlab = "Eruptions", ylab = "Waiting", main = "Scatterplot of Duration x Waiting Time")
# Plot the chart for eruptions and waiting times when you have eruptions with a duration of 3 minutes or less
plot(x = faithful$eruptions, y = faithful$waiting, xlab = "Eruptions", ylab = "Waiting", main = "Scatterplot of Duration x Waiting Time", xlim = c(0, 3))
cor(faithful$eruptions, faithful$waiting)
source('~/Dropbox/qqplots.R')
install.packages("foreign")
library(foreign)
setwd("~/Dropbox/R stuff")
GSSdata<-read.delim("GSS2016.sav", header = TRUE)
GSSdata
GSSdata2<-read.spss("GSS2016.sav", use.value.labels=TRUE to.data.frame=TRUE)
GSSdata<-read.spss("GSS2016.sav",use.value.labels=TRUE, to.data.frame=TRUE)
GSSdata
warnings()
?lattice
install.packages("lattice")
install.packages("ggplot2")
install.packages("tidyverse")
library(lattice)
library(ggplot2)
library(tidyverse)
setwd("~/Dropbox/Salaries")
salaries
salaries <- read.csv("salaries.csv")
salaries
str()
str(salaries)
scatter<-ggplot(salaries, aes(yrs.since.phd, yrs.service))
scatter+geom.point()
scatter+geom_point()
scatter<-ggplot(salaries, aes(yrs.since.phd, yrs.service), main = "Scatterplot of Years Since Ph.D. with Years of Service")
scatter+geom_point()
scatter+geom_point()+geom_smooth()+labs(x = "Years since Ph.D", y = "Years of Service")
scatter+geom_point()+geom_smooth(method="lm")+labs(x = "Years since Ph.D", y = "Years of Service")
scatter+geom_point()+geom_smooth(method="lm", color = "Red")+labs(x = "Years since Ph.D", y = "Years of Service")
scatter<-ggplot(salaries, aes(yrs.since.phd, yrs.service, color=sex))
scatter+geom_point()+geom_smooth(method="lm", color = "Red")+labs(x = "Years since Ph.D", y = "Years of Service")
salariesHistogram <- ggplot(salaries, aes(sex)) + opts(legend.position = "none")
salariesHistogram <- ggplot(salaries, aes(sex))
salariesHistogram + geom_histogram()
salariesHistogram <- ggplot(salaries, aes(salary))
salariesHistogram + geom_histogram()
salariesHistogram + geom_histogram(binwidth=50000)
salariesHistogram + geom_histogram(binwidth=10000)
salariesHistogram + geom_histogram(binwidth=10000) + labs(x = "Salary (with bins of $10,000)", y = "Frequency")
salariesBoxplot <- ggplot(salaries, aes(gender, salary))
salariesBoxplot + geom_boxplot() + labs(x = "Gender", y = "Salary")
salariesBoxplot <- ggplot(salaries, aes(sex, salary))
salariesBoxplot + geom_boxplot() + labs(x = "Gender", y = "Salary")
serviceBoxplot <- ggplot(salaries, aes(sex, yrs.service))
serviceBoxplot + geom_boxplot() + labs(x = "Gender", y = "Salary")
scatterService<-ggplot(salaries, aes(yrs.since.phd, salary, color=sex))
scatter+geom_point()
scatterService+geom_point()
densitySalary <- ggplot(salaries, aes(salary))
density + geom_density() + labs(x = "Salary", y = "Frequency")
density + geom_density()
densitySalary + geom_density() + labs(x = "Salary", y = "Frequency")
barSalary <- ggplot(salaries, aes(sex, salary))
barSalary + stat_summary(fun.y = mean, geom = "bar", fill="White", color = "Black")
barSalary + stat_summary(fun.data = mean_cl_normal, geom = "pointrange")
barSalary + stat_summary(fun.y = mean, geom = "bar", fill="White", color = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange")
install.packages("Hmisc")
library(Hmisc)
barSalary + stat_summary(fun.y = mean, geom = "bar", fill="White", color = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "pointrange") + labs(x = "Gender", y = "Salary")
barSalary + stat_summary(fun.y = mean, geom = "bar", fill="White", color = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "errorbar") + labs(x = "Gender", y = "Salary")
barSalary + stat_summary(fun.y = mean, geom = "bar", position="dodge") + stat_
summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width = 0.90), width = 0.2) + labs(x = "Gender", y = "Salary", fill= "Gender")
barSalary + stat_summary(fun.y = mean, geom = "bar", position="dodge") + stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width = 0.90), width = 0.2) + labs(x = "Gender", y = "Salary", fill= "Gender")
#single variable statisics
mean(salaries$salary)
var(salaries$salary)
median(salaries$salary)
mode(salaries$salary)
#correlation
yrs.data <- dataframe(salaries$yrs.service, salaries$yrs.since.phd)
#correlation
yrs.data <- data.frame(salaries$yrs.service, salaries$yrs.since.phd)
install.packages("Hmisc")
install.packages("ggm")
install.packages("polycor")
install.packages("ggplot2")
install.packages("ggplot2")
library(boot)
library(ggm)
install.packages("ggm")
library(ggm)
library(ggplot2)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
library(Rcmdr)
install.packages("Rcmdr")
library(Rcmdr)
cor(yrs.data, use = "pairwise.complete.obs", method = "pearson")
salary.service <- data.frame(salaries$yrs.service, salaries$salary)
salary.years<- data.frame(salaries$yrs.since.phd, salaries$salary)
cor(salary.service, use = "pairwise.complete.obs", method = "pearson")
cor(salary.years, use = "pairwise.complete.obs", method = "pearson")
str(salaries)
salaryMatrix <- as.matrix(salaries[, c("Since Ph.D", "Service", "Salary")])
salaryMatrix <- as.matrix(salaries[, c(salaries$yrs.since.phd, salaries$yrs.service, salaries$salary)])
salaryMatrix <- salaries[, c(salaries$yrs.since.phd, salaries$yrs.service, salaries$salary)]
salaryMatrix <- salaries[, c(salaries$yrs.since.phd, salaries$yrs.service, salaries$salary)]
cor(salaryMatrix[, c(salaries$yrs.since.phd, salaries$yrs.service, salaries$salary)])
cor(salaries[, c(salaries$yrs.since.phd, salaries$yrs.service, salaries$salary)])
cor(salaries[, c(salaries$yrs.since.phd, salaries$yrs.service, salaries$salary)])
install.packages("foreign")
install.packages("foreign")
install.packages("foreign")
library(foreign)
install.packages("hmisc")
install.packages("Hmisc")
library(Hmisc)
library("Hmisc")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("tidyr")
install.packages("tidyr")
